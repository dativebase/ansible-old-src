---

# Online Linguistic Database installer

# This file is divided into the following blocks:
#   0. Clone source repo
#   1. OS dependencies (debian packages)
#   2. python dependencies (pip packages)
#   3. OS configuration (user/directory/file creation/permissions/ownership )
#   4. OLD code install
#   5. Database config
#   6. web server config

###########################################################
#   0. Clone source repo
###########################################################

- name: "Checkout Online Linguistic Database code"
  git:
    repo: "{{ old_src_repo }}"
    dest: "{{ old_src_dir }}/old"
    version: "{{ old_src_version }}"
    force: "yes"
    accept_hostkey: "yes"
  tags: "oldsrc-clone"

# For some reason, some dirs in the cloned source code
# are not sometimes readable by all. Add a task to fix it
- name: "Ensure the source code is readable by all"
  file:
    path: "{{ old_src_dir }}/old"
    mode: "o+rX"
    recurse: "yes"
  become: "yes"
  tags: "oldsrc-clone"

- name: "Get OLD latest commit hash"
  command: "git rev-parse HEAD"
  args:
    chdir: "{{ old_src_dir }}/old"
  register: "latest_commit_old"
  tags: "oldsrc-clone"

- name: "Save Online Linguistic Database latest commit hash"
  shell: "echo {{ latest_commit_old.stdout }} > {{ old_src_dir }}/old-commit.txt"
  tags: "oldsrc-clone"
# TODO: Make use of latest_commit_old


###########################################################
#   1. OS dependencies (debian packages)
###########################################################

- name: "Add multiverse repositories"
  become: "yes"
  apt_repository:
    repo: "{{ item }}"
    state: "present"
  with_items:
    - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }} multiverse"
    - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }}-security universe"
    - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }}-updates multiverse"

- name: "Install OLD package dependencies"
  apt:
    pkg: "{{ item }}"
    state: "latest"
  with_items: "{{ old_src_pkgdeps }}"
  tags: "oldsrc-osdep"


# Install foma & flookup --- for FST compilation
###########################################################

- file:
    path: "/home/vagrant/downloads/"
    state: "directory"
    mode: 0755
  tags: "oldsrc-osdep"

- name: "Download foma"
  get_url:
    url: "https://bitbucket.org/mhulden/foma/downloads/foma-0.9.18.tar.gz"
    dest: "/home/vagrant/downloads/foma-0.9.18.tar.gz"
  tags: "oldsrc-osdep"

- name: "Extract foma"
  unarchive:
    src: "/home/vagrant/downloads/foma-0.9.18.tar.gz"
    dest: "/home/vagrant/downloads/foma-0.9.18"
    remote_src: "yes"
  tags: "oldsrc-osdep"

- name: "Run `make` in foma"
  make:
    chdir: "/home/vagrant/downloads/foma-0.9.18"
  tags: "oldsrc-osdep"

- name: "Run `sudo make install` in foma"
  make:
    chdir: "/home/vagrant/downloads/foma-0.9.18"
    target: "install"
  become: yes
  tags: "oldsrc-osdep"


# TGrep2 --- Searching treebanks
###########################################################

# Manual instructions (to be deleted)
# cd ~/downloads
# wget http://tedlab.mit.edu/~dr/DRUtils/drutils.tgz
# tar xvzf drutils.tgz
# vim DRUtils/Makefile
# changed ``CC = gcc -Wall -O4 -march=i486`` to ``CC = gcc -Wall -O4``
# cd DRUtils
# sudo make
# cd ~/downloads
# wget http://tedlab.mit.edu/~dr/Tgrep2/tgrep2.tgz
# tar xvzf tgrep2.tgz
# vim TGrep2/Makefile
# changed ``UTIL_DIR= ${HOME}/DRUtils`` to ``UTIL_DIR= ${HOME}/downloads/DRUtils``
# cd TGrep2
# make
# sudo ln -s /home/vagrant/downloads/TGrep2/tgrep2 /usr/local/bin/tgrep2

- name: "Download DRUtils"
  get_url:
    url: "http://tedlab.mit.edu/~dr/DRUtils/drutils.tgz"
    dest: "/home/vagrant/downloads/drutils.tgz"
  tags: "oldsrc-osdep"

- name: "Extract DRUtils"
  unarchive:
    src: "/home/vagrant/downloads/drutils.tgz"
    dest: "/home/vagrant/downloads/DRUtils"
    remote_src: "yes"
  tags: "oldsrc-osdep"

- name: "Make DRUtils 64-bit compilable"
  lineinfile:
  dest: "/home/vagrant/downloads/DRUtils/Makefile"
  regexp: "^CC = gcc -Wall -O4 -march=i486$"
  line: "CC = gcc -Wall -O4"

- name: "Run `make` in DRUtils"
  make:
    chdir: "/home/vagrant/downloads/DRUtils"
  become: "yes"
  tags: "oldsrc-osdep"

- name: "Download TGrep2"
  get_url:
    url: "http://tedlab.mit.edu/~dr/Tgrep2/tgrep2.tgz"
    dest: "/home/vagrant/downloads/tgrep2.tgz"
  tags: "oldsrc-osdep"

- name: "Extract TGrep2"
  unarchive:
    src: "/home/vagrant/downloads/tgrep2.tgz"
    dest: "/home/vagrant/downloads/TGrep2"
    remote_src: "yes"
  tags: "oldsrc-osdep"

- name: "Point TGrep2 to DRUtils"
  lineinfile:
  dest: "/home/vagrant/downloads/TGrep2/Makefile"
  regexp: "^UTIL_DIR= ${HOME}/DRUtils"
  line: "UTIL_DIR= ${HOME}/downloads/DRUtils"

- name: "Run `make` in TGrep2"
  make:
    chdir: "/home/vagrant/downloads/TGrep2"
  tags: "oldsrc-osdep"

- name: "Put tgrep2 in path"
  file:
    src: "/home/vagrant/downloads/TGrep2/tgrep2"
    dest: "/usr/local/bin/tgrep2"
    state: "link"
  tags: "oldsrc-osdep"


# MITLM --- For estimating language models
###########################################################

# sudo apt -y install autoconf automake libtool gfortran autoconf-archive
# sudo apt-get install build-essential g++
# cd ~/downloads
# git clone https://github.com/mitlm/mitlm.git
# cd mitlm
# ./autogen.sh
# ./configure
# make
# sudo make install
# sudo rm /usr/local/bin/estimate-ngram
# sudo ln -s /home/vagrant/downloads/mitlm/estimate-ngram /usr/local/bin/estimate-ngram

- name: "Checkout MITLM code"
  git:
    repo: "https://github.com/mitlm/mitlm.git"
    dest: "/home/vagrant/downloads/mitlm"
    version: "master"
    force: "yes"
    accept_hostkey: "yes"
  tags: "oldsrc-osdep"

- name: "Create MITLM configure script"
  shell: "autogen.sh"
  args:
    chdir: "/home/vagrant/downloads/mitlm"
  tags: "oldsrc-osdep"

- name: "Configure MITLM"
  shell: "configure"
  args:
    chdir: "/home/vagrant/downloads/mitlm"
  tags: "oldsrc-osdep"

- name: "Run `make` in MITLM"
  make:
    chdir: "/home/vagrant/downloads/mitlm"
  tags: "oldsrc-osdep"

- name: "Run `sudo make install` in MITLM"
  make:
    chdir: "/home/vagrant/downloads/mitlm"
    target: "install"
  become: "yes"
  tags: "oldsrc-osdep"


###########################################################
#   2. Python dependencies (pip packages)
###########################################################

- stat:
    path: "{{ old_src_dir }}/old/lib"
  register: "old_lib_dir_check"
  tags: "oldsrc-pydep"

- set_fact:
    old_pip_install_extra_args: ""
  tags: "oldsrc-pydep"

- set_fact:
    old_pip_install_extra_args: "--find-links lib"
  when: "old_lib_dir_check.stat.isdir is defined and old_lib_dir_check.stat.isdir"
  tags: "oldsrc-pydep"

# TODO: add requirements/test.txt and requirements.txt.
# Cf. https://caremad.io/posts/2013/07/setup-vs-requirement/
- name: "Create virtualenv for OLD, pip install requirements"
  pip:
    chdir: "{{ old_src_dir }}/old"
    requirements: "{{ 'requirements/test.txt' if is_dev else 'requirements.txt'}}"
    virtualenv: "/usr/share/python/old"
    virtualenv_python: "python3.4"
    extra_args: "{{ old_pip_install_extra_args }}"
    state: "latest"
  tags: "oldsrc-pydep"


###########################################################
#   3. OS configuration (user/directory/file
#   creation/permissions/ownership)
###########################################################

- name: "Create subdirectories for OLD source files"
  file:
    dest: "{{ item }}"
    state: "directory"
  with_items:
    - "/var/old"
    - "/usr/lib/old"
  tags: "oldsrc-osconf"

- name: "Create subdirectories for OLD config"
  file:
    dest: "{{ item }}"
    state: "directory"
  with_items:
    - "/etc/old"
  tags: "oldsrc-osconf"

- name: "Set owner, group, mode of /var/old recursively"
  file:
    dest: "/var/old"
    state: "directory"
    recurse: "yes"
    owner: "old"
    group: "old"
    mode: "u=rwX,g=rwX,o=rX"
  tags: "oldsrc-osconf"

- name: "Create OLD log directories"
  file:
    dest: "{{ item }}"
    state: "directory"
    owner: "old"
    group: "old"
    mode: "g+s"
  with_items:
    - "/var/log/old"
  tags: "oldsrc-osconf"

- name: "Touch OLD log files"
  file:
    path: "/var/log/old/{{ item }}"
    owner: "old"
    group: "old"
    state: "touch"
  with_items:
    - "old.log"
    - "old_debug.log"
  tags: "oldsrc-osconf"


###########################################################
#   4. OLD code install
###########################################################

# OLD base dir:  /usr/lib/old

- name: "Copy OLD source files"
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: "link"
  with_items:
    - src: "{{ old_src_dir }}/old"
      dest: "/usr/lib/old"
  tags: "oldsrc-code"


###########################################################
#   5. Database config - moved to separate files
###########################################################

###########################################################
#   6. web server config - moved to separate files
###########################################################
